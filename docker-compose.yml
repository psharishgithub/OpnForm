services:
  api: &api-environment
    image: jhumanj/opnform-api:latest
    container_name: opnform-api
    volumes: &api-environment-volumes
      - opnform_storage:/usr/share/nginx/html/storage:rw
    environment: &api-env
      APP_ENV: production
      # Database settings
      DB_HOST: db
      REDIS_HOST: redis
      DB_DATABASE: ${DB_DATABASE:-opnform}
      DB_USERNAME: ${DB_USERNAME:-opnform}
      DB_PASSWORD: ${DB_PASSWORD:-your_secure_password}
      DB_CONNECTION: ${DB_CONNECTION:-pgsql}
      # PHP Configuration
      PHP_MEMORY_LIMIT: "1G"
      PHP_MAX_EXECUTION_TIME: "600"
      PHP_UPLOAD_MAX_FILESIZE: "64M"
      PHP_POST_MAX_SIZE: "64M"
      # IP-based configuration
      APP_URL: ${APP_URL:-http://localhost:8080}
      API_DOMAIN: ${API_DOMAIN:-localhost:8080}
      # Trust proxy for IP access
      TRUSTED_PROXIES: "*"
      # Allow all origins for IP access
      CORS_ALLOWED_ORIGINS: "*"
    env_file:
      - ./api/.env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "php /usr/share/nginx/html/artisan about || exit 1"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 60s
    networks:
      - opnform-network

  api-worker:
    <<: *api-environment
    container_name: opnform-api-worker
    command: ["php", "artisan", "queue:work"]
    environment:
      <<: *api-env
      APP_ENV: production
    healthcheck:
      test:
        ["CMD-SHELL", "pgrep -f 'php artisan queue:work' > /dev/null || exit 1"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - opnform-network

  api-scheduler:
    <<: *api-environment
    container_name: opnform-api-scheduler
    command: ["php", "artisan", "schedule:work"]
    environment:
      <<: *api-env
      APP_ENV: production
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "php /usr/share/nginx/html/artisan app:scheduler-status --mode=check --max-minutes=3 || exit 1",
        ]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 70s
    networks:
      - opnform-network

  ui:
    image: jhumanj/opnform-client:latest
    container_name: opnform-client
    environment:
      # Frontend configuration for IP access
      NUXT_PUBLIC_API_BASE: ${NUXT_PUBLIC_API_BASE:-http://localhost:8080/api}
      NUXT_PUBLIC_APP_URL: ${NUXT_PUBLIC_APP_URL:-http://localhost:8080}
      # Disable host checking for IP access
      NUXT_HOST: "0.0.0.0"
      NUXT_PORT: "3000"
    env_file:
      - ./client/.env
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test:
        ["CMD-SHELL", "wget --spider -q http://localhost:3000/login || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 45s
    # For Coolify to pick up
    expose:
      - "3000"
    networks:
      - opnform-network
    labels:
      - "coolify.managed=true"
      - "coolify.type=application"
      - "coolify.name=opnform-ui"
      # Add IP access labels
      - "traefik.enable=true"
      - "traefik.http.routers.opnform.rule=PathPrefix(`/`)"

  redis:
    image: redis:7
    container_name: opnform-redis
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      interval: 30s
      timeout: 5s
    networks:
      - opnform-network

  db:
    image: postgres:16
    container_name: opnform-db
    environment:
      POSTGRES_DB: ${DB_DATABASE:-opnform}
      POSTGRES_USER: ${DB_USERNAME:-opnform}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-your_secure_password}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME:-opnform}"]
      interval: 30s
      timeout: 5s
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - opnform-network

volumes:
  postgres-data:
  opnform_storage:
  redis-data:

networks:
  opnform-network:
    driver: bridge